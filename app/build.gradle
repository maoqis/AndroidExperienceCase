plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 34

    defaultConfig {
        applicationId "com.maoqis.testcase"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'com.maoqis.testcase'
}

dependencies {



    api project(':Glide9Png:demo')

//    implementation 'io.github.maoqis:glide9png:1.0.1.4.16.0'     //如果 useMavenStr=false，需要注释了，因为唯一标识不一样，demo直接引入了module，测试会报错引入重复class。后续考虑用本地仓库。

    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    // (see https://github.com/ReactiveX/RxJava/releases for latest 3.x.x version)
    implementation 'io.reactivex.rxjava3:rxjava:3.0.8'

    annotationProcessor "com.github.bumptech.glide:compiler:4.16.0"
    implementation 'com.github.bumptech.glide:glide:4.16.0'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

// 子module会覆盖主工程中的 projectsEvaluated，所以独一份
gradle.projectsEvaluated {
    pushLocalMavenBeforePreBuild(":Glide9Png:demo", ':AndroidBaseLib:base')

    pushLocalMavenBeforePreBuild(":Glide9Png:demo", ':Glide9Png:glide9pnglib')
}

private void pushLocalMavenBeforePreBuild(var String mainLib, var String implementLib) {
    def task = project(mainLib).tasks.findByName('preBuild')
    println("projectsEvaluated preBuild=" + task.getPath())


    def base = project(implementLib)
    println("projectsEvaluated 依赖库 path=" + base.getPath() + " tasks size=" + base.tasks.size())

    def publishMavenLocal = base.tasks.getByName("publishToMavenLocal")
    println("projectsEvaluated " + publishMavenLocal.getPath() + " 在preBuild前运行")
    task.dependsOn(publishMavenLocal)
}